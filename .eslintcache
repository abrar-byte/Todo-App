[{"/home/abrar-byte/Todo-App/src/index.js":"1","/home/abrar-byte/Todo-App/src/App.js":"2","/home/abrar-byte/Todo-App/src/Falcon.js":"3","/home/abrar-byte/Todo-App/src/reportWebVitals.js":"4","/home/abrar-byte/Todo-App/src/newTodo.js":"5","/home/abrar-byte/Todo-App/src/Todos.js":"6"},{"size":534,"mtime":1644235395168,"results":"7","hashOfConfig":"8"},{"size":5391,"mtime":1644235309619,"results":"9","hashOfConfig":"8"},{"size":10185,"mtime":1644245746752,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":1642737839254,"results":"11","hashOfConfig":"8"},{"size":2181,"mtime":1642737839254,"results":"12","hashOfConfig":"8"},{"size":6497,"mtime":1642737839254,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"wnd4bp",{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},"/home/abrar-byte/Todo-App/src/index.js",["31"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Falcon from './Falcon';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Falcon />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();",["32","33"],"/home/abrar-byte/Todo-App/src/App.js",["34","35","36","37"],"import { useEffect, useRef, useState } from \"react\";\nimport { HiPlus } from \"react-icons/hi\";\nimport { MdDelete, MdSaveAlt } from \"react-icons/md\";\n\nfunction App() {\n  const todoinputref = useRef();\n  const [todo, setTodo] = useState([]);\n  const [edit, setEdit] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const label = e.target.label.value;\n    const newTodo = [...todo];\n    newTodo.push({ label, status: \"draft\" });\n    setTodo(newTodo);\n\n    e.target.label.value = \"\";\n  };\n\n  const checktodo = (e, i) => {\n    const newTodo = [...todo];\n    if (e.target.checked) {\n      newTodo[i].status = \"done\";\n      setTodo(newTodo);\n    }\n  };\n\n  const checkdraft = (e, i) => {\n    const newTodo = [...todo];\n    if (e.target.checked) {\n      newTodo[i].status = \"draft\";\n      setTodo(newTodo);\n    }\n  };\n\n  const handleOnChange = (e, i) => {\n    const newTodo = [...todo];\n    newTodo[i].label = e.target.value;\n    setEdit(e.target.value);\n    console.log(setEdit);\n  };\n\n  const handleEdit = (x, i) => {\n    const newTodo = [...todo];\n\n    if (edit) {\n    }\n  };\n\n  const onDelete = (e, i) => {\n    const newTodo = [...todo];\n    newTodo.splice(i, 1);\n    setTodo(newTodo);\n  };\n\n  return (\n    <div>\n      <h1 className=\"text-center font-extrabold text-4xl text-blue-400 p-5\">\n        TODO LIST\n      </h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-10\">\n        <div\n          className=\"p-10 mx-auto w-full\"\n          onDrop={(e) => {\n            let value = JSON.parse(e.dataTransfer.getData(\"done\"));\n            const newTodo = [...todo];\n            newTodo[value.index].status = \"draft\";\n            setTodo(newTodo);\n          }}\n          onDragOver={(e) => e.preventDefault()}\n        >\n          <div className=\"text-xl text-green-700\">Todo</div>\n          <form className=\"space-y-5 m-5 w-full\" onSubmit={handleSubmit}>\n            {todo.map((x, i) => {\n              return x.status === \"draft\" ? (\n                <div\n                  key={i}\n                  draggable\n                  onDragStart={(e) =>\n                    e.dataTransfer.setData(\n                      \"draft\",\n                      JSON.stringify({ ...x, index: i })\n                    )\n                  }\n                  className=\"flex items-center space-x-3 border border-blue-800 px-4 py-2 rounded\"\n                >\n                  <input\n                    className=\"p-2 focus:outline-none\"\n                    type=\"checkbox\"\n                    onChange={(e) => checktodo(e, i)}\n                  />\n\n                  <input\n                    type=\"text\"\n                    onChange={(e) => handleOnChange(e, i)}\n                    value={x.label}\n                    className=\"w-full p-2 focus:outline-none\"\n                  />\n\n                  {/* Pake cara object asign */}\n                  <MdDelete\n                    onClick={(e) => onDelete(e, i)}\n                    className=\"hover:text-red-700\"\n                    role=\"button\"\n                  />\n                </div>\n              ) : null;\n            })}\n            <div className=\"flex items-center space-x-3 border border-gray-300 px-4 py-2 rounded\">\n              <HiPlus />\n              <input\n                ref={todoinputref}\n                required\n                autoComplete=\"off\"\n                name=\"label\"\n                type=\"text\"\n                className=\"w-full outline-0 p-2 focus:outline-none\"\n                placeholder=\"Write as You Like 🔪️\"\n              />\n              <button type=\"submit\" className=\"hover:text-red-700\">\n                Save\n              </button>\n            </div>\n          </form>\n        </div>\n        <div\n          className=\"p-10 mx-auto w-full\"\n          onDrop={(e) => {\n            let value = JSON.parse(e.dataTransfer.getData(\"draft\"));\n            const newTodo = [...todo];\n            newTodo[value.index].status = \"done\";\n            setTodo(newTodo);\n          }}\n          onDragOver={(e) => e.preventDefault()}\n        >\n          <div className=\"text-xl text-green-700\">Done</div>\n          <div className=\"space-y-5 m-5 w-full\">\n            {todo.map((x, i) => {\n              return x.status === \"done\" ? (\n                <div\n                  key={i}\n                  draggable\n                  onDragStart={(e) =>\n                    e.dataTransfer.setData(\n                      \"done\",\n                      JSON.stringify({ ...x, index: i })\n                    )\n                  }\n                  className=\"flex items-center space-x-3 border border-gray-300 px-4 py-2 rounded\"\n                >\n                  <input\n                    className=\"p-2 focus:outline-none \"\n                    type=\"checkbox\"\n                    onChange={(e) => checkdraft(e, i)}\n                  />\n                  <input\n                    type=\"text\"\n                    onChange={(e) => handleOnChange(e, i)}\n                    value={x.label}\n                    className=\"w-full p-2 focus:outline-none \"\n                  />\n\n                  <MdDelete\n                    onClick={(e) => onDelete(e, i)}\n                    className=\"hover:text-red-700\"\n                    role=\"button\"\n                  />\n                </div>\n              ) : null;\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","/home/abrar-byte/Todo-App/src/Falcon.js",[],"/home/abrar-byte/Todo-App/src/reportWebVitals.js",[],"/home/abrar-byte/Todo-App/src/newTodo.js",[],["38","39"],"/home/abrar-byte/Todo-App/src/Todos.js",["40","41","42","43"],"import { useEffect, useState } from \"react\";\nimport { HiPlus } from \"react-icons/hi\";\nimport { MdDelete, MdSaveAlt } from \"react-icons/md\";\n\nimport axios from \"axios\";\nimport { IoMdArrowRoundForward, IoMdArrowRoundBack } from \"react-icons/io\";\n\nconst API_URL = \"http://localhost:4000\";\nfunction Todo() {\n  const [todo, setTodo] = useState([{ label: \"minum kopi\", status: \"draft\" }]);\n  const [edit, setEdit] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [group, setGroup] = useState([]);\n\n  const getDataGroups = async () => {\n    axios\n      .get(`${API_URL}/groups`)\n      .then((r) => setGroup(r.data))\n      .catch((e) => console.log(e));\n  };\n\n  const getDataPosts = async () => {\n    axios\n      .get(`${API_URL}/posts`)\n      .then((r) => setTodo(r.data))\n      .catch((e) => console.log(e));\n  };\n  useEffect(() => {\n\n    getDataPosts();\n    getDataGroups();\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const label = e.target.label.value;\n\n    const payload = { label, group: \"draft\" };\n    axios\n      .post(`${API_URL}/posts`, payload, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then(() => {\n        getDataPosts();\n      });\n    e.target.label.value = \"\";\n  };\n\n  \n  const handleOnChange = (e, i) => {\n    const newTodo = [...todo];\n    newTodo[i].label = e.target.value;\n    setEdit(newTodo[i].label);\n    // const id = newTodo[i].id;\n   \n  };\n  // console.log(edit,\"coba\");\n\n  const handleEdit = (x, i) => {\n   \n    if (edit) {\n      const payload = { label: edit };\n\n      axios.patch(`${API_URL}/posts/${x.id}`, payload).then(() => {\n        getDataPosts();\n      });\n      setEdit(\"\");\n    }\n  };\n\n  const onDelete = (e, i) => {\n    const newTodo = [...todo];\n    const id = newTodo[i].id;\n    // const payload ={status : \"done\"};\n    axios.delete(`${API_URL}/posts/${id}`).then(() => {\n      getDataPosts();\n    });\n  };\n\n  const onDropTodo = (e) => {\n    let value = JSON.parse(e.dataTransfer.getDataPosts(\"done\"));\n    const newTodo = [...todo];\n    const id = newTodo[value.index].id;\n    const payload = { status: \"draft\", time: Date.now() };\n\n    axios.patch(`${API_URL}/posts/${id}`, payload).then(() => {\n      getDataPosts();\n    });\n\n    console.log(newTodo[value.index].status, \"newTodo[value.index]\");\n  };\n\n  const onDragTodo = (e, x, i) => {\n    e.dataTransfer.setData(\"draft\", JSON.stringify({ ...x, index: i }));\n  };\n\n  const onDropDone = (e) => {\n    let value = JSON.parse(e.dataTransfer.getDataPosts(\"draft\"));\n    const newTodo = [...todo];\n    const id = newTodo[value.index].id;\n    const payload = { status: \"done\", time: Date.now() };\n    axios.patch(`${API_URL}/posts/${id}`, payload).then(() => {\n      getDataPosts();\n    });\n  };\n\n  const onDragDone = (e, x, i) => {\n    e.dataTransfer.setData(\"done\", JSON.stringify({ ...x, index: i }));\n  };\n\n  const handleMove = (e, i) => {\n    const newTodo = [...todo];\n    const id = newTodo[i].id;\n    const payload = { group: e.target.innerText, time: Date.now() };\n    console.log(id, \"idMove\");\n    console.log(payload, \"payload\");\n\n    axios.patch(`${API_URL}/posts/${id}`, payload).then(() => {\n      getDataPosts();\n    });\n  };\n  const handleGroupMoving = async (e, position) => {\n    setLoading(true)\n\n    const payload = { group: e.target.innerText, time: Date.now() };\n    await todo.map(\n      async (v) =>\n      await v.group === position &&\n        (await axios.patch(`${API_URL}/posts/${v.id}`, payload))\n    );\n    await getDataPosts();\n    setLoading(false)\n\n\n  };  \n\n  \n\n  return (\n    <>\n   {loading? <div className=\"text-2xl \">LOADING</div> :  <div>\n      <h1 className=\"text-center font-extrabold text-4xl text-teal-500\t\t\t\">\n        FAKE TRELLO\n      </h1>\n      <div className=\"flex\">\n        {group.map((item1, i1) => (\n          <div\n            className=\"p-10 mx-auto w-full\"\n            onDrop={(e) => onDropTodo(e)}\n            onDragOver={(e) => e.preventDefault()}\n          >\n            <div className=\"text-xl text-gray-500\">{item1.name}</div>\n            {group.map((itemx, ix) => (\n              <button onClick={(e)=> handleGroupMoving(e, item1.name)} className=\"mx-3\">\n                {itemx.name}\n              </button>\n            ))}\n            <form className=\"space-y-5 m-5 w-full\" onSubmit={handleSubmit}>\n              {todo\n                .sort((a, b) =>\n                  a.time > b.time ? 1 : b.time > a.time ? -1 : 0\n                )\n                .map((item2, i2) => {\n                  return item2.group === item1.name ? (\n                    <div\n                      key={i2}\n                      draggable\n                      onDragStart={(e) => onDragTodo(e, item2, i2)}\n                      className=\"flex items-center space-x-3 border border-gray-300 px-4 py-2 rounded\"\n                    >\n                   \n                      {group.map((item3, i3) => (\n                        <button onClick={(e) => handleMove(e, i2)}>\n                          {item3.name}\n                        </button>\n                      ))}                    \n                      <input\n                        type=\"text\"\n                        onChange={(e) => handleOnChange(e, i2)}\n                        value={item2.label}\n                        className=\"w-full \"\n                      />\n                      <MdSaveAlt\n                        onClick={() => handleEdit(item2, i2)}\n                        className=\"hover:text-red-700\"\n                        role=\"button\"\n                      />\n                      <MdDelete\n                        onClick={(e) => onDelete(e, i2)}\n                        className=\"hover:text-red-700\"\n                        role=\"button\"\n                      />\n                    </div>\n                  ) : null;\n                })}\n\n              <div className=\"flex items-center space-x-3 border border-gray-300 px-4 py-2 rounded\">\n                <HiPlus />\n                <input\n                  required\n                  autoComplete=\"off\"\n                  name=\"label\"\n                  type=\"text\"\n                  className=\"w-full outline-0\"\n                  placeholder=\"Write as You Like 🔪️\"\n                />\n                <button type=\"submit\" className=\"hover:text-red-700\">\n                  Save\n                </button>\n              </div>\n            </form>\n          </div>\n        ))}\n      </div>\n    </div>}\n    </>\n  );\n}\n\nexport default Todo;\n",{"ruleId":"44","severity":1,"message":"45","line":3,"column":8,"nodeType":"46","messageId":"47","endLine":3,"endColumn":11},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"44","severity":1,"message":"52","line":1,"column":10,"nodeType":"46","messageId":"47","endLine":1,"endColumn":19},{"ruleId":"44","severity":1,"message":"53","line":3,"column":20,"nodeType":"46","messageId":"47","endLine":3,"endColumn":29},{"ruleId":"44","severity":1,"message":"54","line":43,"column":9,"nodeType":"46","messageId":"47","endLine":43,"endColumn":19},{"ruleId":"44","severity":1,"message":"55","line":44,"column":11,"nodeType":"46","messageId":"47","endLine":44,"endColumn":18},{"ruleId":"48","replacedBy":"56"},{"ruleId":"50","replacedBy":"57"},{"ruleId":"44","severity":1,"message":"58","line":6,"column":10,"nodeType":"46","messageId":"47","endLine":6,"endColumn":31},{"ruleId":"44","severity":1,"message":"59","line":6,"column":33,"nodeType":"46","messageId":"47","endLine":6,"endColumn":51},{"ruleId":"44","severity":1,"message":"60","line":99,"column":9,"nodeType":"46","messageId":"47","endLine":99,"endColumn":19},{"ruleId":"44","severity":1,"message":"61","line":109,"column":9,"nodeType":"46","messageId":"47","endLine":109,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["62"],"no-negated-in-lhs",["63"],"'useEffect' is defined but never used.","'MdSaveAlt' is defined but never used.","'handleEdit' is assigned a value but never used.","'newTodo' is assigned a value but never used.",["62"],["63"],"'IoMdArrowRoundForward' is defined but never used.","'IoMdArrowRoundBack' is defined but never used.","'onDropDone' is assigned a value but never used.","'onDragDone' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]